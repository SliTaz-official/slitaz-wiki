This page aims to list SliTaz tricks that you can't find in other distributions.

====== ISO9660 image file ======

The SliTaz GNU/Linux distrbution is published as a downloadable iso image file.
The different flavors (base, core64, loram...) are built in this format.

Nowadays booting on a CD-ROM is not so fashionable. People prefer to boot their SliTaz
from a USB key, a memory card or a hard disk.

It's easy to create a USB key under Linux with the [[wp>dd_(Unix)]] command.
Some third party Windows tools aim to be able to create USB keys, but most of
them don't support the SliTaz [[en:guides:manyinone|many-in-one]] format (also known as //russian dolls//).

<note tip>SliTaz ISO images are also a DOS/Windows program to create USB keys.
<code>C:\> ren slitaz.iso mkusbkey.exe</code>
</note>

People would like to add some personal data to the ISO image such as a //Wifi
configuration// or //SSH keys//. But the ISO remastering is not an easy thing
to do.

SliTaz provides a linux tool [[http://cook.slitaz.org/cooker.cgi?download=../wok/syslinux-extra/taz/syslinux-extra-4.06/fs/usr/bin/iso2exe|iso2exe]]
and the DOS/Windows tool [[http://mirror.slitaz.org/boot/isohybrid.exe|isohybrid.exe]]
to add a custom initrd and some extra cmdline arguments.

<note>
By the way, these tools add the DOS/Windows program to create USB keys.
</note>

A linux usage can be:
<code>
$ iso2exe -a "rdinit=init.custom" -i initrd.gz slitaz.iso -f
</code>

A DOS (16 bits) or Windows (32 bits) usage can be:
<code>
C:\> isohybrid -a "rdinit=init.custom" -i initrd.gz slitaz.iso -f
</code>

<note tip>The executable shell script **/init.custom** in the initrd.gz file
installs the extra software in the boot scripts:
<code>
#!/bin/sh

# Add custom kernel modules
sed -i 's/LOAD_MODULES="/&amodule anothermodule/' /etc/rcS.conf

# Start extra daemons
sed -i 's/RUN_DAEMONS="/&demon1 demon2/' /etc/rcS.conf

# Custom boot commands
cat >> /etc/init.d/local.sh <<EOT
shell commands...
EOT

# Continue normal boot sequence
exec /init
</code> 
</note>

An iso9660 image file has three parts:
  - a 32Kb header filled with zeros
  - a [[wp>|ISO_9660]] filesystem
  - a tail filled with zeros to round up the file size to the next megabyte

==== The ISO header: to create a USB key from DOS/Windows ====

This is a 3 in 1 header:
  * a [[wp>Master_boot_record]] from [[wp>isolinux]] to boot from a USB key
  * a 16 bits DOS [[wp>.exe]] file to launch a Linux utility menu with a USB creation item
  * a 32 bits Windows [[wp>.exe]] file to create a USB key
<note>The [[wp>El_Torito_(CD-ROM_standard)]] boot is untouched (as a part of the ISO9660 filesystem)
</note>

It includes a iso9660 filesystem [[wp>md5sum]] hash and its own checksum (in
the [[wp>.exe]] file header). Design rational can be found in the
[[http://hg.slitaz.org/wok/file/tip/syslinux/stuff/iso2exe/README#l1|README file]]

The [[http://cook.slitaz.org/cooker.cgi?download=../wok/syslinux-extra/taz/syslinux-extra-4.06/fs/usr/bin/taziso|taziso]]
tool can both show and use the ISO header features.

<note tip>A taziso graphical/web interface is available in the tazpanel utility
under the **boot** / **mine** menu item.</note>

<note tip>Most of the ISO header features can be used with other live Linux
distributions such as [[wp>Tiny_Core_Linux]], [[wp>Puppy_Linux]] or [[wp>KNOPPIX]]
(i.e. you can use **iso2exe** or **isohybrid.exe** with these distributions too).
</note>

==== The ISO tail: to store your configurations ====

The ISO tail has a magic string and its own md5 hash. The md5 can be checked by
taziso and the ISO boot menu under DOS. The ISO9660 filesystem is untouched.
The md5 hash in the boot area is still valid.

The isolinux bootloader is modified by SliTaz to load the custom configuration
unlike other distributions.

Small custom configurations should not change the ISO image size thanks to the
megabyte alignment. Larger configurations can extend the ISO image without
limitation.

<note tip>Custom configurations help to test the [[http://mirror.slitaz.org/iso/rolling/slitaz-rolling.iso|SliTaz weekly build]] with automatic
wifi setups or SSH keys... You can add the following entry in your grub config,
have a custom automatic setup and still test the real CD-ROM boot sequence.
<code>
SliTaz rolling iso
	map --mem --heads=0 --sectors-per-tracks=0 /boot/slitaz-rolling.iso (hd32)
	map --hook
	chainloader (hd32)
</code>
</note>

====== Packages enhancements ======

==== dropbear ====

Dropbear is a SSH2 client and server. The server side supports X11 forwarding
but the client does not. SliTaz provides a tiny shell script named [[http://hg.slitaz.org/wok/file/tip/dropbear/stuff/sshx#l1|sshx]] to
restore this feature. By the way 2 other scripts are given:
  * **pppssh** a poor mans VPN. TCP based, it can add delays to the VPN network.
  * **sshfbvnc** adds authentication and encryption to the fbvnc viewer.

==== sshfs-fuse ====

Sshfs-fuse can mount a remote filesystem on the local machine. SliTaz provides
a tiny script named [[http://hg.slitaz.org/wok/file/tip/sshfs-fuse/stuff/rsshfs#l1|rsshfs]] to mount a local filesystem on a remote machine.

==== cloop ====

Cloop packages (fusecloop, cloop-utils...) are able to mount **any** cloop
formats. The official software fails to mount earlier formats.

They add a [[http://hg.slitaz.org/wok/file/tip/fusecloop/description.txt#l1|new format]] to reduce the memory consumption during the 
compressed file creation.

==== ipxe ====

This PXE has a [[http://hg.slitaz.org/wok/file/tip/ipxe/stuff/ipxe.cmd#l1|built in configuration]] to boot from a SliTaz server and can
be used without a local PXE server.

==== sane-backends ====

The scanner drivers package adds a GUI in a
[[http://hg.slitaz.org/wok/file/tip/sane-backends/stuff/tazpanel/sane.cgi#l1|tazpanel module]].